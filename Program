class Program
{
  static void Main()
  {
    Strings s = new Strings();

    s.randomString.Add(2);
    s.randomString.Add(1);
    s.randomString.Add(6);
    s.randomString.Add(7);
    s.randomString.Add(5);
    s.randomString.Add(4);
    s.ShowString();


    Console.ReadKey();

    QuickSort q = new QuickSort();
    q.Sort(s.randomString);
    s.ShowString();

  }
}

public class Strings
{
  public Strings()
  {

  }

  Random randomNumber = new Random();
  public List<int> randomString = new List<int>();

  public void GenerateRandoms(int stringLength, int maxValue)
  {
    for (int i = 0; i < stringLength; i++)
    {
      randomString.Add(randomNumber.Next(maxValue+1));
    }
  }

  public void ShowString()
  {
    Console.WriteLine(string.Join(", ", randomString));
  }
}

public class BubbleSort : ISorting
{
  public List<int> Sort(List<int> list)
  {
    int temporaryValue = 0;

    for (int i = 0; i < list.Count(); i++)
    {
      for (int j = 0; j < list.Count() - 1; j++)
      {
        if (list[j] > list[j + 1])
        {
          temporaryValue = list[j + 1];
          list[j + 1] = list[j];
          list[j] = temporaryValue;
        }
      }
    }

    return list;
  }
}

public class InsertionSort : ISorting
{
  public List<int> Sort(List<int> list)
  {
    int temporaryValue = 0;

    for (int i = 0; i < list.Count() - 1; i++)
    {
      if (list[i] > list[i + 1])
      {
        for (int j = 0; j < i; j++)
        {
          if (list[i + 1] < list[j])
          {
            temporaryValue = list[j];
            list[j] = list[i + 1];
            list[i + 1] = temporaryValue;
          }
        }
      }
    }

    return list;
  }
}

public class QuickSort : ISorting
{
  public List<int> Sort(List<int> list)
  {
    int temporaryValue = 0;
    List<int> temporaryListLeft = new List<int>();
    List<int> temporaryListRight = new List<int>();

    int leftIndex = 0;
    int rightIndex = list.Count-1;
    int pivot = list[rightIndex];

    for (int i = leftIndex; i < rightIndex; i++)
    {
      if (list[i] > pivot)
      {
        temporaryValue = list[i];
        list[i] = pivot;
        list[rightIndex] = temporaryValue;

        for (int j = 0; j < i; j++)
        {
          temporaryListLeft.Add(list[j]);
        }

        for (int j = 0; j < list.Count; j++)
        {
          temporaryListRight.Add(list[j]);
        }

        break;
      }
    }

    if(temporaryListLeft.Count > 1)
    {
      Sort(temporaryListLeft);

      for (int i = 0; i < temporaryListLeft.Count; i++)
      {
        list[i] = temporaryListLeft[i];
      }
    }

    if (temporaryListRight.Count > 1)
    {
      Sort(temporaryListRight);

      for (int i = temporaryListLeft.Count; i < temporaryListRight.Count; i++)
      {
        list[i] = temporaryListRight[i];
      }
    }

    return list;
  }
}

public class Merge : ISorting //jeszcze nie czas...
{
  public List<int> Sort(List<int> list)
  {
    int temporaryValue = 0;
    int middleOne = 0;

    for (int i = 0; i <= list.Count(); i++)
    {

    }

    return list;
  }
}

public interface ISorting
{
  public List<int> Sort(List<int> list);
}
