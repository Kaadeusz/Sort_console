class Program
{
    static void Main()
    {
        Strings s = new Strings();

        s.randomString.Add(2);
        s.randomString.Add(1);
        s.randomString.Add(6);
        s.randomString.Add(7);
        s.randomString.Add(5);
        s.randomString.Add(4);
        s.randomString.Add(3);
        s.ShowString();


        Console.ReadKey();

        MergeSort sort = new MergeSort();
        sort.Sort(s.randomString);
        s.ShowString();

    }
}

public class Strings
{
    public Strings()
    {

    }

    Random randomNumber = new Random();
    public List<int> randomString = new List<int>();

    public void GenerateRandoms(int stringLength, int maxValue)
    {
        for (int i = 0; i < stringLength; i++)
        {
            randomString.Add(randomNumber.Next(maxValue + 1));
        }
    }

    public void ShowString()
    {
        Console.WriteLine(string.Join(", ", randomString));
    }
}

public class BubbleSort : ISorting
{
    public List<int> Sort(List<int> list)
    {
        int temporaryValue = 0;

        for (int i = 0; i < list.Count(); i++)
        {
            for (int j = 0; j < list.Count() - 1; j++)
            {
                if (list[j] > list[j + 1])
                {
                    temporaryValue = list[j + 1];
                    list[j + 1] = list[j];
                    list[j] = temporaryValue;
                }
            }
        }

        return list;
    }
}

public class SelectionSort : ISorting
{
    public List<int> Sort(List<int> list)
    {
        int temporaryValue = 0;
        int minValue = 0;
        int minValueIndex = 0;

        for (int i = 0; i < list.Count-1; i++)
        {
            minValueIndex = i;
            minValue = list[i];

            for (int j = i+1; j < list.Count; j++)
            {
                if (minValue > list[j])
                {
                    minValue = list[j];
                    minValueIndex = j;
                }
            }

            temporaryValue = list[i];
            list[i] = minValue;
            list[minValueIndex] = temporaryValue;
        }

        return list;
    }
}

public class InsertionSort : ISorting
{
    public List<int> Sort(List<int> list)
    {
        int temporaryValue = 0;

        for (int i = 0; i < list.Count() - 1; i++)
        {
            if (list[i] > list[i + 1])
            {
                for (int j = 0; j < i; j++)
                {
                    if (list[i + 1] < list[j])
                    {
                        temporaryValue = list[j];
                        list[j] = list[i + 1];
                        list[i + 1] = temporaryValue;
                    }
                }
            }
        }

        return list;
    }
}

/*public class QuickSort : ISorting //niekompletny
{

}*/

public class MergeSort : ISorting //jeszcze nie czas...
{

    public List<int> ListDivide(List<int> list)
    {
        List<int> temporaryListLeft = new List<int>();
        List<int> temporaryListRight = new List<int>();

        for (int i = 0; i < list.Count/2; i++)
        {
            temporaryListLeft.Add(list[i]);
        }

        for (int i = list.Count/2; i < list.Count; i++)
        {
            temporaryListRight.Add(list[i]);
        }

        return list;
    }

    public List<int> Sort(List<int> list)
    {
        int temporaryValue = 0;

        for(int i = 0; i < list.Count/2; i++)
        {
            ListDivide(list);
        }

        return list;
    }
}

public interface ISorting
{
    public List<int> Sort(List<int> list);
}
